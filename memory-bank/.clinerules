# Cline Rules: 日本公立高校入試マッチングシステム

## プロジェクト固有のパターン

### 命名規則

1. **ファイル名**
   - コンポーネント: PascalCase (例: `StudentDashboard.tsx`)
   - ユーティリティ/ヘルパー: camelCase (例: `daAlgorithm.ts`)
   - API Routes: kebab-case (例: `api/students/[id]/applications.ts`)

2. **変数名**
   - 一般変数: camelCase (例: `studentList`)
   - 定数: UPPER_SNAKE_CASE (例: `MAX_APPLICATIONS`)
   - 型/インターフェース: PascalCase (例: `Student`, `SchoolInfo`)

3. **関数名**
   - 一般関数: camelCase (例: `getStudentById`)
   - コンポーネント: PascalCase (例: `ApplicationForm`)
   - カスタムフック: use + PascalCase (例: `useStudentData`)

### コード構造

1. **ディレクトリ構造**
   ```
   src/
   ├── app/                  # Next.js App Router
   │   ├── api/              # API Routes
   │   ├── student/          # 学生向けページ
   │   ├── school/           # 高校向けページ
   │   └── admin/            # 教育委員会向けページ
   ├── components/           # 共通コンポーネント
   │   ├── ui/               # 基本UIコンポーネント
   │   ├── student/          # 学生関連コンポーネント
   │   ├── school/           # 高校関連コンポーネント
   │   └── admin/            # 教育委員会関連コンポーネント
   ├── lib/                  # ユーティリティ関数
   │   ├── db.ts             # データベース接続
   │   ├── matching/         # マッチングアルゴリズム
   │   └── services/         # サービス層
   ├── types/                # 型定義
   └── utils/                # 汎用ユーティリティ
   ```

2. **コンポーネント構造**
   - 各コンポーネントは独自のディレクトリに配置
   - インデックスファイルでエクスポート
   - 関連するスタイルやテストを同じディレクトリに配置

3. **インポート順序**
   - 外部ライブラリ
   - 内部モジュール（アルファベット順）
   - 型定義
   - スタイル

### コーディングスタイル

1. **TypeScript**
   - 厳格な型チェック (`strict: true`)
   - 明示的な型定義
   - 非同期関数には常に戻り値の型を指定

2. **React**
   - 関数コンポーネントを使用
   - Hooksを活用
   - サーバーコンポーネントとクライアントコンポーネントを適切に使い分け

3. **TailwindCSS**
   - ユーティリティクラスを直接使用
   - 複雑なスタイルは@applyディレクティブでカスタムクラスを作成
   - レスポンシブデザインにはTailwindのブレークポイントを使用

## ユーザー設定とワークフロー

### 開発環境

1. **開発サーバー**
   - `npm run dev` または `pnpm dev` で開発サーバーを起動
   - デフォルトポート: 3000

2. **データベース**
   - Tursoデータベースを使用
   - 開発用データベースは別途セットアップ
   - 環境変数で接続情報を管理

### コミュニケーションスタイル

1. **技術的な説明**
   - 簡潔で明確な説明
   - 必要に応じてコードサンプルを提供
   - 図表を活用して複雑な概念を説明

2. **タスク管理**
   - 明確なタスク定義
   - 優先順位の設定
   - 進捗の可視化

## プロジェクト固有の知識

### DAアルゴリズム

1. **基本原理**
   - 学生を成績順にソート（降順）
   - 各学生の希望順位に従って高校を割り当て
   - 高校の定員を考慮

2. **実装のポイント**
   - 効率的なソートアルゴリズム
   - 希望順位の処理
   - エッジケースの処理（定員オーバー、希望校なし）

### データモデル

1. **主要エンティティ**
   - 学生（id, 名前, 連絡先）
   - 高校（id, 名前, 場所, 定員）
   - 応募（学生id, 高校id, 希望順位）
   - 選考セッション（id, 作成日時, ステータス）
   - 試験結果（セッションid, 学生id, 点数, マッチング先高校id）

2. **リレーションシップ**
   - 学生 1:N 応募
   - 高校 1:N 応募
   - 選考セッション 1:N 試験結果
   - 学生 1:N 試験結果
   - 高校 1:N 試験結果（マッチング）

### UI/UX設計

1. **ユーザーフロー**
   - 学生: 高校閲覧 → 応募 → 結果確認
   - 高校: 応募者確認 → マッチング結果確認
   - 教育委員会: 高校管理 → 選考セッション作成 → マッチング実行 → 結果確認

2. **デザインガイドライン**
   - シンプルで直感的なインターフェース
   - 明確なナビゲーション
   - レスポンシブデザイン
   - アクセシビリティに配慮

## 既知の課題と解決策

1. **DAアルゴリズムの最適化**
   - 問題: 大規模データセットでのパフォーマンス
   - 解決策: 効率的なデータ構造の使用、計算の最適化

2. **Turso統合**
   - 問題: 接続設定とエラーハンドリング
   - 解決策: 適切なエラーハンドリングとリトライメカニズム

3. **UI/UX設計**
   - 問題: 各ステークホルダーに適したインターフェース
   - 解決策: ユーザー中心設計、明確なナビゲーション、一貫したデザイン
